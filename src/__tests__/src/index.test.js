// ********RoostGPT********
// Test generated by RoostGPT for test ReactTesting using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { render, fireEvent, waitFor, screen } from '@testing-library/react';
import axios from 'axios';
import App from '../../components/App';  // Corrected the import path as per the test file location

jest.mock('axios');

describe('App Component', () => {
  test('renders the search engine component', () => {
    render(<App />);
    expect(screen.getByPlaceholderText(/enter city name/i)).toBeInTheDocument();
  });

  test('displays loading message when fetching data', () => {
    render(<App />);
    fireEvent.change(screen.getByPlaceholderText(/enter city name/i), { target: { value: 'Paris' } });
    fireEvent.keyDown(document.activeElement, { key: 'Enter' });
    expect(screen.getByText(/searching../i)).toBeInTheDocument();
  });

  test('fetches and displays weather data', async () => {
    const mockResponse = {
      data: {
        condition: 'Sunny',
        temperature: '19',
        // other weather data
      },
    };
    axios.get.mockResolvedValue(mockResponse);

    render(<App />);
    fireEvent.change(screen.getByPlaceholderText(/enter city name/i), { target: { value: 'Paris' } });
    fireEvent.keyDown(document.activeElement, { key: 'Enter' });

    await waitFor(() => {
      expect(screen.getByText(/sunny/i)).toBeInTheDocument();  // Assuming 'Sunny' is rendered by Forecast component
      expect(screen.getByText(/19/i)).toBeInTheDocument();
    });
  });

  test('handles API errors gracefully', async () => {
    axios.get.mockRejectedValue(new Error('API error'));

    render(<App />);
    fireEvent.change(screen.getByPlaceholderText(/enter city name/i), { target: { value: 'Unknown' } });
    fireEvent.keyDown(document.activeElement, { key: 'Enter' });

    await waitFor(() => {
      expect(screen.getByText(/sorry city not found, please try again./i)).toBeInTheDocument(); 
    });
  });
});

