// ********RoostGPT********
// Test generated by RoostGPT for test ReactTesting using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
/**
 * @jest-environment jsdom
 */

import React from 'react';
import { render, waitFor } from '@testing-library/react';
import axios from 'axios';
import Forecast from '../components/Forecast';
// Mocking the 'axios' module for API call simulation
jest.mock('axios');

describe('Forecast component', () => {
  // Test case for checking if the component initializes its state correctly
  test('initializes state variables correctly', () => {
    const { getByTestId } = render(<Forecast weather={{ data: { city: 'London' } }} />);
    // Verify that elements displaying the data are present or not
    expect(getByTestId('forecast-container')).toBeInTheDocument();
    expect(getByTestId('toggle-temp-unit')).toBeInTheDocument();
  });

  // Test case for successful API call and setting of forecast data
  test('fetches and displays forecast data after a successful API call', async () => {
    // Mock response data for the successful axios call
    const mockData = {
      daily: [
        { date: 1618200000, temperature: 15, weatherCode: 800 },
        { date: 1618286400, temperature: 17, weatherCode: 500 }
      ]
    };
    axios.get.mockResolvedValueOnce({ data: mockData });

    const { getByTestId } = render(<Forecast weather={{ data: { city: 'London' } }} />);
    // Verify forecast data is rendered on the screen after the API call
    await waitFor(() => {
      expect(getByTestId('forecast-day-0')).toHaveTextContent('Mon');
      expect(getByTestId('forecast-day-0-temp')).toHaveTextContent('15°C');
      expect(getByTestId('forecast-day-1')).toHaveTextContent('Tue');
      expect(getByTestId('forecast-day-1-temp')).toHaveTextContent('17°C');
    });
  });

  // Test case for handling API call failure and showing an error message
  test('displays error message on API failure', async () => {
    // Mock an axios error
    axios.get.mockRejectedValueOnce(new Error('API call failed'));

    const { getByTestId } = render(<Forecast weather={{ data: { city: 'London' } }} />);
    // Verify that error message is displayed
    await waitFor(() => {
      expect(getByTestId('forecast-error')).toHaveTextContent('Error fetching forecast data');
    });
  });
});

