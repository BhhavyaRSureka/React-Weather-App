// ********RoostGPT********
// Test generated by RoostGPT for test ReactTesting using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
// src/__tests__/src/components/SearchEngine.test.js
import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import SearchEngine from '../../components/SearchEngine'; // Correct import path according to the file location

describe('SearchEngine Component', () => {
  let query;
  let setQueryMock;
  let searchMock;

  beforeEach(() => {
    query = '';
    setQueryMock = jest.fn();
    searchMock = jest.fn();
  });

  test('renders search input field with correct placeholder', () => {
    const { getByPlaceholderText } = render(
      <SearchEngine query={query} setQuery={setQueryMock} search={searchMock} />
    );
    expect(getByPlaceholderText('enter city name')).toBeInTheDocument();
  });

  test('calls setQuery when input value changes', () => {
    const { getByPlaceholderText } = render(
      <SearchEngine query={query} setQuery={setQueryMock} search={searchMock} />
    );
    const inputElement = getByPlaceholderText('enter city name');
    fireEvent.change(inputElement, { target: { value: 'New York' } });
    expect(setQueryMock).toHaveBeenCalledWith('New York');
  });

  test('calls search function when Enter key is pressed', () => {
    const { getByPlaceholderText } = render(
      <SearchEngine query={query} setQuery={setQueryMock} search={searchMock} />
    );
    const inputElement = getByPlaceholderText('enter city name');
    fireEvent.keyPress(inputElement, { key: 'Enter', code: 'Enter' });
    expect(searchMock).toHaveBeenCalled();
  });

  test('does not call search function when a non-Enter key is pressed', () => {
    const { getByPlaceholderText } = render(
      <SearchEngine query={query} setQuery={setQueryMock} search={searchMock} />
    );
    const inputElement = getByPlaceholderText('enter city name');
    fireEvent.keyPress(inputElement, { key: 'A', code: 'KeyA' });
    expect(searchMock).not.toHaveBeenCalled();
  });
});

